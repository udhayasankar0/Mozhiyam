
import React, { useState, useEffect } from 'react';
import Navbar from '@/components/layout/Navbar';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Book, BookOpen, Upload, Heart, MessageCircle, Plus, ThumbsUp, Search, Filter, SortAsc, User } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import LibraryPostCard from '@/components/library/LibraryPostCard';
import CreatePostDialog from '@/components/library/CreatePostDialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Mock data for library posts
const INITIAL_POSTS = [
  {
    id: '1',
    title: 'роиро┐ро▓ро╛ ро╡ро┐ро┤ро┐ тЬиЁЯМЩ',
    content: `роиро┐ро┤ро▓рпН рокрпЛро▓рпЗ роирпА ро╡роирпНродро╛ропрпН,
роиро┐ройрпИро╡ро╛роХро┐ рокрпЛройро╛ропрпН!
роиро┐ро▓ро╛ роТро│ро┐ропро┐ро▓рпН роХройро╛роХрпНроХро│ро╛ропрпН,
роирпЖроЮрпНроЪроорпЗ роиро┐ро▒рпИроирпНродро╛ропрпН!

роХро╛ро▒рпНро▒рпБ рокрпЗроЪрпБроорпН роХро╛родро▓ро╛ропрпН,
роХрогрпНрогро┐ро▓рпН родроЩрпНроХро┐ роирпАропрпЗ!
роирпЗро░роорпН роЪрпЖройрпНро▒ро╛ро▓рпБроорпН роОройрпНро▒рпБроорпН,
роирпЖроЮрпНроЪро┐ро▓рпН ро╡ро╛ро┤рпНро╡ро╛ропрпН роирпАропрпЗ! тЭдя╕П`,
    author: 'роХро╡ро┐роЮро░рпН роЕроорпБродройрпН',
    type: 'poem' as const,
    likes: 24,
    comments: [
      { id: 'c1', author: 'ро░ро╛роЬройрпН', content: 'роЕро░рпБроорпИропро╛рой роХро╡ро┐родрпИ! рооро┐роХро╡рпБроорпН рокро┐роЯро┐родрпНродро┐ро░рпБроирпНродродрпБ.', timestamp: '2 hours ago' },
      { id: 'c2', author: 'рооро╛ро▓родро┐', content: 'роЙрогро░рпНро╡рпБроХро│рпИ роЕро┤роХро╛роХ ро╡рпЖро│ро┐рокрпНрокроЯрпБродрпНродро┐ропрпБро│рпНро│рпАро░рпНроХро│рпН.', timestamp: '1 day ago' }
    ],
    timestamp: '3 days ago'
  },
  {
    id: '2',
    title: 'роХро╛ро▒рпНро▒рпБроорпН роХройро╡рпБроорпН тЬиЁЯМ┐',
    content: `роЪро┐ро▒ро┐роп роХро┐ро░ро╛роородрпНродро┐ро▓рпН ро╡роЪро┐родрпНрод роЕро░рпБрогрпН, ро╡ро╛ройродрпНродрпИ роирпЗроЪро┐роХрпНроХро┐ро▒ро╛ройрпН. роЕро╡ройрпБроХрпНроХрпБ роЪро┐ро▒рпБро╡ропродро┐ро▓рпН роЗро░рпБроирпНродрпБ ро╡ро┐рогрпНро╡рпЖро│ро┐ропрпИ роЖро░ро╛ропрпНро╡родрпЖройрпНро▒рпЗ роЖроЪрпИ. роЖройро╛ро▓рпН роХро┐ро░ро╛роородрпНродро┐ро▓рпН рокрпЖро░ро┐роп ро╡ро╛ропрпНрокрпНрокрпБроХро│рпН роЗро▓рпНро▓рпИ.

роТро░рпБ роиро╛ро│рпН, роТро░рпБ рокрпЛроЯрпНроЯро┐ропро┐ро▓рпН роХро▓роирпНродрпБ роХрпКрогрпНроЯрпБ, роЕро╡ройрпН роОро┤рпБродро┐роп роХроЯрпНроЯрпБро░рпИ роорпБродро▓рпН рокро░ро┐роЪрпБ рокрпЖро▒рпНро▒родрпБ. роЕродрпБ роЕро╡ройрпИ роироХро░родрпНродро┐ро▒рпНроХрпБроХрпН роХрпВроЯрпНроЯро┐ роЪрпЖройрпНро▒родрпБ. роЕроЩрпНроХрпБ роЕро╡ройрпН роТро░рпБ рокрпЖро░ро┐роп ро╡ро┐роЮрпНроЮро╛ройро┐ропрпИ роЪроирпНродро┐роХрпНроХро┐ро▒ро╛ройрпН. роЕроирпНрод ро╡ро┐роЮрпНроЮро╛ройро┐ роХрпВро▒рпБроХро┐ро▒ро╛ро░рпН:

"ро╡ро╛ропрпНрокрпНрокрпБроХро│рпН роирпАрогрпНроЯродрпВро░роорпН рокропрогроорпН роЪрпЖропрпНропродрпНродро╛ройрпН роЪрпЖропрпНродро╛ро▓рпБроорпН, роХройро╡рпБ рокро▒роХрпНроХродрпН родрпКроЯроЩрпНроХрпБро╡родро▒рпНроХрпБ роТро░рпБ роЪро┐ро▒ро┐роп роХро╛ро▒рпНро▒рпЗ рокрпЛродрпБроорпН!"

роЕроирпНрод ро╡ро╛ро░рпНродрпНродрпИроХро│рпН роЕро░рпБрогрпБроХрпНроХрпБ роТро░рпБ рокрпБродро┐роп роироорпНрокро┐роХрпНроХрпИропрпИроХрпН роХрпКроЯрпБродрпНродродрпБ. роЪро┐ро▓ роЖрогрпНроЯрпБроХро│рпБроХрпНроХрпБрокрпН рокро┐ро▒роХрпБ, роЕро╡ройрпН роЗроирпНродро┐ропро╛ро╡ро┐ройрпН роорпБроХрпНроХро┐роп ро╡ро┐рогрпНро╡рпЖро│ро┐ роЖро░ро╛ропрпНроЪрпНроЪро┐ропро╛ро│ро░ро╛роХ рооро╛ро▒ро┐ройро╛ройрпН. роХро┐ро░ро╛роородрпНродро┐ро▓ро┐ро░рпБроирпНрод роЪро┐ро▒ро┐роп роХройро╡рпБ, ро╡ро┐рогрпНро╡рпЖро│ро┐роХрпНроХрпБрокрпН рокро▒роирпНродродрпБ! ЁЯЪАтЬи

роорпКро┤ро┐:
роироорпН роХройро╡рпБроХро│рпН роОродрпБро╡ро╛роХ роЗро░рпБроирпНродро╛ро▓рпБроорпН, роироорпНрокро┐роХрпНроХрпИропрпБроЯройрпН роорпБропройрпНро▒ро╛ро▓рпН роЕродрпБ роиро┐роЪрпНроЪропрооро╛роХ роиро┐ро▒рпИро╡рпЗро▒рпБроорпН! ЁЯШК`,
    author: 'роЪрпЖро▓рпНро╡ро╛',
    type: 'story' as const,
    likes: 45,
    comments: [
      { id: 'c3', author: 'ро░роорпЗро╖рпН', content: 'роЪро┐ро▒рпБроХродрпИ роорпВро▓роорпН роТро░рпБ роЕро┤роХро╛рой роЪрпЖропрпНродро┐ропрпИроЪрпН роЪрпКро▓рпНро▓ро┐ропрпБро│рпНро│рпАро░рпНроХро│рпН.', timestamp: '1 hour ago' }
    ],
    timestamp: '2 days ago'
  },
  {
    id: '3',
    title: 'рооро┤рпИ роиро╛ро│рпН ЁЯМзя╕П',
    content: `рооро┤рпИ рокрпЖропрпНропрпБроорпН роиро╛ро│ро┐ро▓рпН
рооройроорпН роХрпБро│ро┐ро░рпНроирпНродродрпБ
рооро░роЩрпНроХро│рпН роироЯройрооро╛роЯро┐рой
рооро▓ро░рпНроХро│рпН роороХро┐ро┤рпНроирпНродрой
роорогрпНрогро┐ройрпН ро╡ро╛роЪройрпИ
рооройродрпИ роиро┐ро▒рпИродрпНродродрпБ

роирпАро░рпН родрпБро│ро┐роХро│рпН роЬройрпНройро▓рпН ро╡ро┤ро┐ропрпЗ
роирпЖроЮрпНроЪро┐ро▓рпН роЗроЪрпИропрпЖро┤рпБрокрпНрокро┐рой
роиро┐ройрпИро╡рпБроХро│рпН роХро░рпИроирпНродрой
роирпЗро░роорпН роиро┐ройрпНро▒родрпБ`,
    author: 'Prabhakaran',
    type: 'poem' as const,
    likes: 18,
    comments: [
      { id: 'c4', author: 'роЪро░ро╡рогройрпН', content: 'рооро┤рпИ роиро╛ро│ро┐ройрпН роЙрогро░рпНро╡рпБроХро│рпИ роЕро┤роХро╛роХ ро╡рпЖро│ро┐рокрпНрокроЯрпБродрпНродро┐ропрпБро│рпНро│рпАро░рпНроХро│рпН!', timestamp: '5 hours ago' }
    ],
    timestamp: '1 day ago'
  }
];

// Define the post interface
interface Post {
  id: string;
  title: string;
  content: string;
  author: string;
  type: 'poem' | 'story';
  likes: number;
  comments: {
    id: string;
    author: string;
    content: string;
    timestamp: string;
  }[];
  timestamp: string;
}

const LibraryPage = () => {
  const [posts, setPosts] = useState<Post[]>(INITIAL_POSTS);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentFilter, setCurrentFilter] = useState<'all' | 'poem' | 'story'>('all');
  const [userName, setUserName] = useState('Prabhakaran');
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    // Simulate loading data from an API
    const timer = setTimeout(() => {
      setLoading(false);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, []);

  const handlePostSubmit = (newPost: { title: string; content: string; type: 'poem' | 'story' }) => {
    const postWithDetails: Post = {
      ...newPost,
      id: `post-${Date.now()}`,
      author: userName,
      likes: 0,
      comments: [],
      timestamp: 'Just now'
    };
    
    setPosts([postWithDetails, ...posts]);
    setIsCreateDialogOpen(false);
    
    toast({
      title: "рокродро┐ро╡рпБ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ",
      description: "роЙроЩрпНроХро│рпН рокроЯрпИрокрпНрокрпБ роирпВро▓роХродрпНродро┐ро▓рпН роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ.",
    });
  };

  const handleLike = (postId: string) => {
    setPosts(posts.map(post => 
      post.id === postId ? { ...post, likes: post.likes + 1 } : post
    ));
  };

  const handleAddComment = (postId: string, commentText: string) => {
    if (!commentText.trim()) return;
    
    setPosts(posts.map(post => {
      if (post.id === postId) {
        const newComment = {
          id: `comment-${Date.now()}`,
          author: userName,
          content: commentText,
          timestamp: 'Just now'
        };
        return {
          ...post,
          comments: [...post.comments, newComment]
        };
      }
      return post;
    }));

    toast({
      description: "роХро░рпБродрпНродрпБ роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ",
    });
  };

  const filteredPosts = posts.filter(post => {
    const matchesSearch = post.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
                           post.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           post.author.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesFilter = currentFilter === 'all' || post.type === currentFilter;
    
    return matchesSearch && matchesFilter;
  });

  const featuredPosts = [...posts].sort((a, b) => b.likes - a.likes).slice(0, 3);
  
  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <main className="flex-1 py-8 bg-neutral-background">
        <div className="container px-4 md:px-6">
          <div className="flex flex-col md:flex-row justify-between items-center mb-8">
            <div>
              <h1 className="text-3xl font-bold text-tamil-DEFAULT mb-2 flex items-center">
                <BookOpen className="mr-2" size={28} />
                роирпВро▓роХроорпН <span className="ml-2 text-neutral-text-medium font-normal text-lg">(Tamil Library)</span>
              </h1>
              <p className="text-neutral-text-medium">
                родрооро┐ро┤рпН роХро╡ро┐родрпИроХро│рпН, роЪро┐ро▒рпБроХродрпИроХро│рпН рооро▒рпНро▒рпБроорпН рокроЯрпИрокрпНрокрпБроХро│рпИ рокроХро┐ро░рпНроирпНродрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН
              </p>
            </div>
            
            <div className="flex gap-4 mt-4 md:mt-0">
              <div className="relative w-64">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-neutral-text-medium" />
                <Input
                  placeholder="родрпЗроЯрпБроЩрпНроХро│рпН..."
                  className="pl-9"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              
              <Button 
                onClick={() => setIsCreateDialogOpen(true)}
                className="flex items-center gap-2"
              >
                <Plus size={16} />
                рокрпБродро┐роп рокроЯрпИрокрпНрокрпБ
              </Button>
            </div>
          </div>

          {/* User Profile Banner */}
          <div className="mb-8 p-6 bg-white rounded-lg shadow-sm border border-neutral-border">
            <div className="flex items-center gap-4">
              <div className="w-16 h-16 rounded-full bg-tamil-DEFAULT/10 flex items-center justify-center text-tamil-DEFAULT">
                <User size={32} />
              </div>
              <div>
                <h2 className="text-xl font-semibold">{userName}</h2>
                <p className="text-neutral-text-medium">3 рокроЯрпИрокрпНрокрпБроХро│рпН ┬╖ 67 ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН рокрпЖро▒рпНро▒ро╡рпИ</p>
              </div>
            </div>
          </div>

          <Tabs defaultValue="all" className="mb-8">
            <div className="flex justify-between items-center">
              <TabsList>
                <TabsTrigger value="all" onClick={() => setCurrentFilter('all')}>
                  роЕройрпИродрпНродрпБроорпН
                </TabsTrigger>
                <TabsTrigger value="poem" onClick={() => setCurrentFilter('poem')}>
                  <BookOpen size={14} className="mr-1" />
                  роХро╡ро┐родрпИроХро│рпН
                </TabsTrigger>
                <TabsTrigger value="story" onClick={() => setCurrentFilter('story')}>
                  <Book size={14} className="mr-1" />
                  роЪро┐ро▒рпБроХродрпИроХро│рпН
                </TabsTrigger>
              </TabsList>
              
              <div className="flex items-center gap-2">
                <Button variant="ghost" size="sm" className="text-neutral-text-medium">
                  <SortAsc size={16} className="mr-1" />
                  роЪроорпАрокродрпНродро┐ропро╡рпИ
                </Button>
              </div>
            </div>
          </Tabs>

          {/* Featured Section */}
          {currentFilter === 'all' && searchQuery === '' && (
            <div className="mb-8">
              <h2 className="text-xl font-semibold mb-4 flex items-center">
                <Heart size={18} className="mr-2 text-tamil-DEFAULT" />
                роЪро┐ро▒роирпНрод рокроЯрпИрокрпНрокрпБроХро│рпН
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {featuredPosts.map(post => (
                  <div key={post.id} className="bg-white p-4 rounded-lg border border-neutral-border shadow-sm hover:shadow-md transition-shadow">
                    <div className="flex items-center gap-2 mb-2">
                      {post.type === 'poem' ? (
                        <BookOpen size={14} className="text-tamil-medium" />
                      ) : (
                        <Book size={14} className="text-tamil-light" />
                      )}
                      <span className="text-xs font-medium text-neutral-text-medium">
                        {post.type === 'poem' ? 'роХро╡ро┐родрпИ' : 'роЪро┐ро▒рпБроХродрпИ'}
                      </span>
                    </div>
                    <h3 className="font-bold text-tamil-DEFAULT mb-1">{post.title}</h3>
                    <p className="text-sm text-neutral-text-medium mb-2">{post.author}</p>
                    <p className="text-sm line-clamp-3 mb-3">{post.content.substring(0, 120)}...</p>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <ThumbsUp size={14} className="text-tamil-DEFAULT" />
                        <span className="text-sm">{post.likes}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <MessageCircle size={14} className="text-neutral-text-medium" />
                        <span className="text-sm">{post.comments.length}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Skeleton loader */}
          {loading ? (
            <div className="space-y-6">
              {[1, 2, 3].map(i => (
                <div key={i} className="rounded-lg border border-neutral-border bg-white p-6 animate-pulse">
                  <div className="h-6 bg-neutral-background rounded w-1/3 mb-4"></div>
                  <div className="h-4 bg-neutral-background rounded w-1/4 mb-8"></div>
                  <div className="space-y-2">
                    <div className="h-3 bg-neutral-background rounded"></div>
                    <div className="h-3 bg-neutral-background rounded"></div>
                    <div className="h-3 bg-neutral-background rounded w-4/5"></div>
                  </div>
                </div>
              ))}
            </div>
          ) : filteredPosts.length > 0 ? (
            <ScrollArea className="h-[calc(100vh-350px)]">
              <div className="space-y-6 pr-4">
                {filteredPosts.map(post => (
                  <LibraryPostCard
                    key={post.id}
                    post={post}
                    onLike={() => handleLike(post.id)}
                    onAddComment={(comment) => handleAddComment(post.id, comment)}
                  />
                ))}
              </div>
            </ScrollArea>
          ) : (
            <div className="text-center py-10">
              <p className="text-lg font-medium">роОроирпНрод рокроЯрпИрокрпНрокрпБроХро│рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ</p>
              <p className="text-neutral-text-medium mt-2">родрпЗроЯро▓рпБроХрпНроХрпБ рокрпКро░рпБроирпНродрпБроорпН рокроЯрпИрокрпНрокрпБроХро│рпН роЗро▓рпНро▓рпИ. ро╡рпЗро▒рпБ родрпЗроЯро▓рпН роЪрпКро▒рпНроХро│рпИ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.</p>
            </div>
          )}
        </div>
      </main>
      
      <CreatePostDialog 
        isOpen={isCreateDialogOpen} 
        onClose={() => setIsCreateDialogOpen(false)}
        onSubmit={handlePostSubmit}
      />
      
      <footer className="bg-white border-t border-neutral-border py-6">
        <div className="container px-4 md:px-6">
          <div className="flex flex-col md:flex-row justify-between items-center gap-4">
            <p className="text-neutral-text-medium text-sm">
              ┬й 2025 Tamil Language Tools. All rights reserved.
            </p>
            <div className="flex gap-4">
              <a href="#" className="text-neutral-text-medium hover:text-tamil-DEFAULT text-sm">
                About
              </a>
              <a href="#" className="text-neutral-text-medium hover:text-tamil-DEFAULT text-sm">
                Privacy
              </a>
              <a href="#" className="text-neutral-text-medium hover:text-tamil-DEFAULT text-sm">
                Contact
              </a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default LibraryPage;
